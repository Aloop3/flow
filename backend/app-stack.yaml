AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Flow - Application Stack (Lambda Functions + API Gateway)
  Frequently changing resources

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name for resource naming
  CorsOrigin:
    Type: String
    Default: 'https://dev.dykl7ea8q4fpo.amplifyapp.com'
    Description: CORS origin for API Gateway
  LayerVersion:
    Type: String
    Default: v0-1-0
    Description: Version of layers to use
  AlertEmail:
    Type: String
    Default: ""
    Description: Email address for monitoring alerts
    NoEcho: true

Globals:
  Function:
    Timeout: 30
    Runtime: python3.9
    MemorySize: 256
    Layers:
      - !ImportValue 
        Fn::Sub: "flow-layers-VendorLayerArn-${LayerVersion}"
      - !ImportValue
        Fn::Sub: "flow-layers-CommonLayerArn-${LayerVersion}"
    Environment:
      Variables:
        USERS_TABLE: !ImportValue 
          Fn::Sub: "flow-${Environment}-UsersTable"
        BLOCKS_TABLE: !ImportValue
          Fn::Sub: "flow-${Environment}-BlocksTable"
        WEEKS_TABLE: !ImportValue
          Fn::Sub: "flow-${Environment}-WeeksTable"
        DAYS_TABLE: !ImportValue
          Fn::Sub: "flow-${Environment}-DaysTable"
        EXERCISES_TABLE: !ImportValue
          Fn::Sub: "flow-${Environment}-ExercisesTable"
        WORKOUTS_TABLE: !ImportValue
          Fn::Sub: "flow-${Environment}-WorkoutsTable"
        RELATIONSHIPS_TABLE: !ImportValue
          Fn::Sub: "flow-${Environment}-RelationshipsTable"
        LOG_LEVEL: INFO
        REGION: !Ref AWS::Region

Conditions:
  IsProdEnvironment: !Equals [!Ref Environment, "prod"]
  IsDevEnvironment: !Equals [!Ref Environment, "dev"]

Resources:
  # API Gateway Definition
  FlowAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS,PATCH'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,Access-Control-Allow-Origin'"
        AllowOrigin: !Sub "'${CorsOrigin}'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
         CognitoAuthorizer:
            UserPoolArn: !ImportValue
              Fn::Sub: "flow-${Environment}-UserPoolArn"
        AddDefaultAuthorizerToCorsPreflight: false

  # User Lambda function
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/user_lambda/
      Handler: user_lambda.handler
      Description: Lambda handler for user-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-UsersTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-ExercisesTable"
      
      Events:
        # User API Routes
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /users
            Method: post
        CreateCustomExercise:
          Type: Api
          Properties:
            Path: /users/{user_id}/custom-exercises
            RestApiId: !Ref FlowAPI
            Method: post
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /users/{user_id}
            Method: get
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /users/{user_id}
            Method: put
  
  # Block Lambda function
  BlockFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/block_lambda/
      Handler: block_lambda.handler
      Description: Lambda handler for block-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-BlocksTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-WeeksTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-DaysTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-ExercisesTable"

      Events:
        # Block API Routes
        CreateBlock:
          Type: Api
          Properties:
           RestApiId: !Ref FlowAPI
           Path: /blocks
           Method: post
        GetBlock:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /blocks/{block_id}
            Method: get
        GetBlocksByAthlete:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /athletes/{athlete_id}/blocks
            Method: get
        UpdateBlock:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /blocks/{block_id}
            Method: put
        DeleteBlock:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /blocks/{block_id}
            Method: delete

  # WeekFunction
  WeekFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/week_lambda/
      Handler: week_lambda.handler
      Description: Lambda handler for week-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-WeeksTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-DaysTable"

      Events:
        # Week API Routes
        CreateWeek:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /weeks
            Method: post
        GetWeeksForBlock:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /blocks/{block_id}/weeks
            Method: get
        UpdateWeek:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /weeks/{week_id}
            Method: put
        DeleteWeek:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /weeks/{week_id}
            Method: delete
  
  # Day Lambda function
  DayFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/day_lambda/
      Handler: day_lambda.handler
      Description: Lambda handler for day-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-DaysTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-ExercisesTable"

      Events:
        # Day API Routes
        CreateDay:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /days
            Method: post
        GetDay:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /days/{day_id}
            Method: get
        GetDaysForWeek:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /weeks/{week_id}/days
            Method: get
        UpdateDay:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /days/{day_id}
            Method: put
        DeleteDay:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /days/{day_id}
            Method: delete

  # ExerciseFunction
  ExerciseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/exercise_lambda/
      Handler: exercise_lambda.handler
      Description: Lambda handler for exercise-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-ExercisesTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-WorkoutsTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-UsersTable"

      Events:
        # Exercise API Routes
        CreateExercise:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises
            Method: post
        GetExercisesForDay:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /days/{day_id}/exercises
            Method: get
        CompleteExercise:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/{exercise_id}/complete
            Method: post
        GetExerciseTypes:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/types
            Method: get
        UpdateExercise:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/{exercise_id}
            Method: put
        DeleteExercise:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/{exercise_id}
            Method: delete
        ReorderExercises:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/reorder
            Method: post
        ReorderSets:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/{exercise_id}/reorder-sets
            Method: post
        TrackSet:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/{exercise_id}/sets/{set_number}
            Method: post
        DeleteSet:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /exercises/{exercise_id}/sets/{set_number}
            Method: delete

  # Workout Lambda function
  WorkoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/workout_lambda
      Handler: workout_lambda.handler
      Description: Lambda handler for workout-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-WorkoutsTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-DaysTable"
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-ExercisesTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-BlocksTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-WeeksTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-RelationshipsTable"

      Events:
        # Workout API Routes
        CreateWorkout:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /workouts
            Method: post
        CreateDayWorkout:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /days/{day_id}/workout
            Method: post
        GetWorkout:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /workouts/{workout_id}
            Method: get
        GetWorkoutsByAthlete:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /athletes/{athlete_id}/workouts
            Method: get
        GetWorkoutByDay:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /athletes/{athlete_id}/days/{day_id}/workout
            Method: get
        UpdateWorkout:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /workouts/{workout_id}
            Method: put
        DeleteWorkout:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /workouts/{workout_id}
            Method: delete
        CopyWorkout:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /workouts/copy
            Method: post
  
  # Relationship Lambda function
  RelationshipFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/relationship_lambda/
      Handler: relationship_lambda.handler
      Description: Lambda handler for relationship-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-RelationshipsTable"

      Events:
        # Relationship API Routes
        CreateRelationship:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /relationships
            Method: post
        AcceptRelationship:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /relationships/{relationship_id}/accept
            Method: post
        EndRelationship:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /relationships/{relationship_id}/end
            Method: post
        GetCoachRelationships:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /coaches/{coach_id}/relationships
            Method: get
        GetAthleteRelationships:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /athletes/{athlete_id}/relationships
            Method: get
        GetRelationship:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /relationships/{relationship_id}
            Method: get
        GenerateInvitationCode:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /coaches/{coach_id}/invitation
            Method: post
        AcceptInvitationCode:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /athletes/{athlete_id}/accept-invitation
            Method: post
  
  # Analytics Lambda function
  AnalyticsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/analytics_lambda/
      Handler: analytics_lambda.handler
      Description: Lambda handler for analytics-related endpoints
      Timeout: 30
      Policies:
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-WorkoutsTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-ExercisesTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-BlocksTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-WeeksTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-DaysTable"
        - DynamoDBReadPolicy:
            TableName: !ImportValue
              Fn::Sub: "flow-${Environment}-RelationshipsTable"

      Events:
        # Analytics API Routes
        MaxWeightHistory:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /analytics/max-weight/{athlete_id}
            Method: get
        
        VolumeCalculation:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /analytics/volume/{athlete_id}
            Method: get
        
        ExerciseFrequency:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /analytics/frequency/{athlete_id}
            Method: get
        
        BlockAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /analytics/block-analysis/{athlete_id}/{block_id}
            Method: get
        
        BlockComparison:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /analytics/block-comparison/{athlete_id}
            Method: get     
  
  # Health Check Lambda function
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/health_lambda/
      Handler: health_lambda.handler
      Description: Health check endpoint for CI/CD validation
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

      Events:
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /health
            Method: get
            Auth:
              Authorizer: NONE
              OverrideApiAuth: true
  
  # Feedback Lambda function (dev only)
  FeedbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambdas/feedback_lambda/
      Handler: feedback_lambda.handler
      Description: Beta feedback collection endpoint
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Policies:
        - SNSPublishMessagePolicy:
            TopicName: !Sub "flow-${Environment}-feedback-alerts"

      Events:
        SubmitFeedback:
          Type: Api
          Properties:
            RestApiId: !Ref FlowAPI
            Path: /feedback
            Method: post

  # SNS Topic for Alerts
  MonitoringTopic:
    Type: AWS::SNS::Topic
    Condition: IsProdEnvironment
    Properties:
      TopicName: !Sub "flow-${Environment}-monitoring-alerts"
      DisplayName: !Sub "Flow ${Environment} Environment Monitoring Alerts"
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertEmail
  
  # SNS Topic for beta feedback (dev only)
  FeedbackTopic:
    Type: AWS::SNS::Topic
    Condition: IsDevEnvironment
    Properties:
      TopicName: !Sub "flow-${Environment}-feedback-alerts"
      DisplayName: !Sub "Flow ${Environment} Beta Feedback"
      Subscription:
        - Protocol: email
          Endpoint: !Ref AlertEmail

  # Lambda Error Alarms
  LambdaErrorsAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-lambda-errors-high"
      AlarmDescription: !Sub "Lambda errors exceeded threshold in ${Environment}"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300  # 5 minutes
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      OKActions:
        - !Ref MonitoringTopic
      TreatMissingData: notBreaching
      Dimensions:
        - Name: FunctionName
          Value: !Sub "${AWS::StackName}-UserFunction-*"

  # Individual Lambda Function Alarms (for detailed troubleshooting)
  UserFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-user-lambda-errors"
      AlarmDescription: "User Lambda function errors"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserFunction

  BlockFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-block-lambda-errors"
      AlarmDescription: "Block Lambda function errors"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref BlockFunction

  WorkoutFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-workout-lambda-errors"
      AlarmDescription: "Workout Lambda function errors"
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      Dimensions:
        - Name: FunctionName
          Value: !Ref WorkoutFunction

  # Lambda Timeout Alarms (Production only)
  LambdaTimeoutAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-lambda-timeout-approaching"
      AlarmDescription: "Lambda duration approaching timeout"
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 24000  # 80% of 30 second timeout (24 seconds in milliseconds)
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      TreatMissingData: notBreaching

  # DynamoDB Throttling Alarms
  BlocksTableThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-blocks-dynamodb-throttles"
      AlarmDescription: "Blocks table throttling events"
      MetricName: UserErrors
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      Dimensions:
        - Name: TableName
          Value: !ImportValue
            Fn::Sub: "flow-${Environment}-BlocksTable"

  WorkoutsTableThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-workouts-dynamodb-throttles"
      AlarmDescription: "Workouts table throttling events"
      MetricName: UserErrors
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      Dimensions:
        - Name: TableName
          Value: !ImportValue
            Fn::Sub: "flow-${Environment}-WorkoutsTable"

  ExercisesTableThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-exercises-dynamodb-throttles"
      AlarmDescription: "Exercises table throttling events"
      MetricName: UserErrors
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      Dimensions:
        - Name: TableName
          Value: !ImportValue
            Fn::Sub: "flow-${Environment}-ExercisesTable"

  # API Gateway 5xx Error Alarm
  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: IsProdEnvironment
    Properties:
      AlarmName: !Sub "${Environment}-flow-api-5xx-errors-high"
      AlarmDescription: "API Gateway 5xx errors exceeded threshold"
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 2
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref MonitoringTopic
      Dimensions:
        - Name: ApiName
          Value: !Sub "${AWS::StackName}-FlowAPI"

Outputs:
  FlowApi:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${FlowAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "flow-app-${Environment}-FlowApi"
  
  MonitoringTopicArn:
    Condition: IsProdEnvironment
    Description: "Monitoring alerts SNS topic ARN"
    Value: !Ref MonitoringTopic
    Export:
      Name: !Sub "flow-app-${Environment}-MonitoringTopic"