name: Flow Tests and Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-test.txt
        
    - name: Configure AWS credentials for testing
      run: |
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/config
        echo "region = us-east-1" >> ~/.aws/config
        echo "output = json" >> ~/.aws/config
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = test" >> ~/.aws/credentials  
        echo "aws_secret_access_key = test" >> ~/.aws/credentials
        
    - name: Lint with flake8
      run: |
        cd backend
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=layers/vendor/
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=layers/vendor/
        
    - name: Check formatting with black
      run: |
        cd backend
        black --check --exclude "layers/vendor" .
        
    - name: Run tests with coverage
      env:
        AWS_DEFAULT_REGION: us-east-1
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
      run: |
        cd backend
        # Create __init__.py files if they don't exist
        mkdir -p tests
        touch tests/__init__.py
        find tests -type d -exec touch {}/__init__.py \;
        
        # Try more robust test discovery 
        python -m pytest
        
        # Generate coverage reports
        coverage report -m
        coverage xml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Determine deployment environment
      id: env
      run: |
        echo "environment=prod" >> $GITHUB_OUTPUT
        echo "cors_origin=https://prod.d3n7bxbkj4ddz8.amplifyapp.com" >> $GITHUB_OUTPUT
        echo "layer_version=v0-1-0" >> $GITHUB_OUTPUT
    
    - name: Deploy Data Stack
      working-directory: backend
      run: |
        sam validate --lint -t data-stack.yaml
        sam build -t data-stack.yaml
        sam deploy -t data-stack.yaml \
          --stack-name "flow-data-${{ steps.env.outputs.environment }}" \
          --parameter-overrides Environment=${{ steps.env.outputs.environment }} LayerVersion=${{ steps.env.outputs.layer_version }} \
          --no-confirm-changeset --no-fail-on-empty-changeset --capabilities CAPABILITY_IAM
    
    - name: Deploy App Stack
      working-directory: backend
      run: |
        sam validate --lint -t app-stack.yaml
        sam build -t app-stack.yaml
        sam deploy -t app-stack.yaml \
          --stack-name "flow-app-${{ steps.env.outputs.environment }}" \
          --parameter-overrides Environment=${{ steps.env.outputs.environment }} CorsOrigin="${{ steps.env.outputs.cors_origin }}" LayerVersion=${{ steps.env.outputs.layer_version }} \
          --no-confirm-changeset --no-fail-on-empty-changeset --capabilities CAPABILITY_IAM
    
    - name: Get API URL
      id: api_url
      working-directory: backend
      run: |
        API_URL=$(aws cloudformation describe-stacks --stack-name "flow-app-${{ steps.env.outputs.environment }}" --query 'Stacks[0].Outputs[?OutputKey==`FlowApi`].OutputValue' --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"
    
    - name: Health check validation
      run: |
        echo "🔍 Validating API health..."
        API_URL="${{ steps.api_url.outputs.api_url }}"
        
        # Wait for API to be available (max 2 minutes)
        for i in {1..24}; do
          if curl -s -f "${API_URL}/health" > /dev/null; then
            echo "✅ Health check passed on attempt $i"
            break
          else
            echo "⏳ Health check attempt $i failed, retrying in 5s..."
            sleep 5
          fi
          
          if [ $i -eq 24 ]; then
            echo "❌ Health check failed after 2 minutes"
            exit 1
          fi
        done
        
        # Validate health response
        HEALTH_RESPONSE=$(curl -s "${API_URL}/health")
        echo "🏥 Health response: $HEALTH_RESPONSE"
        
        # Check if response contains expected fields
        if echo "$HEALTH_RESPONSE" | jq -e '.status == "healthy" and .environment == "${{ steps.env.outputs.environment }}"' > /dev/null; then
          echo "✅ Health check validation successful"
        else
          echo "❌ Health check validation failed"
          exit 1
        fi
    
    - name: Deployment summary
      run: |
        echo "🎉 Deployment completed successfully!"
        echo "📍 Environment: ${{ steps.env.outputs.environment }}"
        echo "🌐 API URL: ${{ steps.api_url.outputs.api_url }}"
        echo "🏥 Health check: ✅ PASSED"
        echo "📦 Layers: MANUAL (v0-1-0) - No automated updates"